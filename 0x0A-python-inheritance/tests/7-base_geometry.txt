>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 12, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", "12")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: my_int must be an integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: my_int must be an integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", -2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 23, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: my_int must be greater than 0
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 23, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: my_int must be greater than 0
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg = BaseGeometry()
>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 2, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() takes 3 positional arguments but 4 were given
>>> bg = BaseGeometry()
>>> bg.area(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: area() takes 1 positional argument but 2 were given
>>> bg = BaseGeometry()
>>> bg.area(2, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: area() takes 1 positional argument but 3 were given
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", (12,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: my_int must be an integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", [12])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: my_int must be an integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", {12, 11})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: my_int must be an integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: my_int must be an integer
